<?php

namespace App\Services;

use App\Contracts\VerifyInterface;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Tymon\JWTAuth\Facades\JWTAuth;

class AuthService
{
    // Dependency injection of a verification service that implements VerifyInterface.
    protected $verifyService;

    /**
     * Constructor to inject the verification service.
     *
     * @param VerifyInterface $verifyService The verification service to handle email verification.
     */
    public function __construct(VerifyInterface $verifyService)
    {
        $this->verifyService = $verifyService;
    }

    /**
     * Registers a new user.
     *
     * @param object $data The user registration data (email, password, name).
     * @return string Returns a JWT token for the newly registered user.
     */
    public function register($data)
    {
        // Create a new user with the provided data.
        $user = User::create([
            "email" => $data->email,
            "password" => Hash::make($data->password), // Hash the password for security.
            "name" => $data->name
        ]);

        // Send a verification email to the user using the injected verification service.
        // The verification code is generated by hashing the user's email.
        $this->verifyService->sendVerification($user, sha1($user->email));

        // Generate a JWT token for the newly registered user.
        $token = JWTAuth::fromUser($user);

        // Return the JWT token.
        return $token;
    }

    /**
     * Logs in an existing user.
     *
     * @param object $data The user login data (email, password).
     * @return string|Illuminate\Http\JsonResponse Returns a JWT token if login is successful, or an error response if unauthorized.
     */
    public function login($data)
    {
        // Attempt to authenticate the user using the provided email and password.
        if (!$token = auth()->attempt(["email" => $data->email, "password" => $data->password])) {
            // If authentication fails, return a 401 Unauthorized response.
            return response()->json(["message" => "Unauthorized"], 401);
        }

        // If authentication is successful, return the JWT token.
        return $token;
    }

    /**
     * Verifies a user's email using the provided code.
     *
     * @param User $user The user whose email is being verified.
     * @param string $code The verification code to check.
     * @return bool Returns true if verification is successful, false otherwise.
     */
    public function verify(User $user, string $code)
    {
        // Delegate the verification process to the injected verification service.
        return $this->verifyService->verify($user, $code);
    }
}